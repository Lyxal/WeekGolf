{
    "Header" : {
        "Variable declaration" : "Variable declaration",
        "Constant declaration" : "Constant declaration",
        "Function declaration" : "Function declaration",
        "Lambda declaration" : "Lambda declaration",
        "While loop" : "While loop",
        "For loop" : "For loop",
        "Foreach loop" : "Foreach loop",
        "Do .. while loop" : "Do .. while loop",
        "Foreach index and element loop" : "Foreach index and element loop",
        "Infinite loop" : "Infinite loop",
        "if ... else if ... else" : "if ... else if ... else",
        "Ternary operator" : "Ternary operator",
        "Try ... Catch" : "Try ... Catch",
        "Switch" : "Switch",
        "Type of the %" : "Type of the %",
        "Top level constructor" : "Top level constructor",
        "Get a line of STDIN" : "Get a line of STDIN",
        "Get all STDIN" : "Get all STDIN",
        "Get a char STDIN" : "Get a char STDIN",
        "Print without a new line at the end" : "Print without a new line at the end",
        "Print with a new line at the end" : "Print with a new line at the end",
        "Implicit conversion of bool to int" : "Implicit conversion of bool to int",
        "Implicit conversion of char to int" : "Implicit conversion of char to int",
        "Format a string" : "Format a string",
        "Template string" : "Template string",
        "Three-Way operator" : "Three-Way operator"
    },

    "C" : {
        "Variable declaration" : "auto s = \"a variable\"",
        "Constant declaration" : "const auto s = \"a constant\"",
        "Function declaration" : "type a_function(type argument){\n\treturn argument;\n}",
        "Lambda declaration" : false,
        "While loop" : "while (b){...}",
        "For loop" : "for(int i = 0; i < n; i++){...}",
        "Foreach loop" : false,
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : false,
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "main(){}",
        "Get a line of STDIN" : "scanf(\"%s\",&s)",
        "Get all STDIN" : false,
        "Get a char STDIN" : "s=getchar()",
        "Print without a new line at the end" : "printf(\"%s\",s)",
        "Print with a new line at the end" : "printf(\"%s\n\",s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : true,
        "Format a string" : "sprintf(\"%s\",s)",
        "Template string" : false,
        "Three-Way operator" : false
    },

    "C++" : {
        "Variable declaration" : "auto s = \"a variable\"",
        "Constant declaration" : "const auto s = \"a constant\"",
        "Function declaration" : "type a_function(type argument){\n\treturn argument;\n}",
        "Lambda declaration" : false,
        "While loop" : "while (b){...}",
        "For loop" : "for(int i = 0; i < n; i++){...}",
        "Foreach loop" : "for(auto c:s){...}",
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : false,
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "int main(){}",
        "Get a line of STDIN" : "scanf(\"%s\",&s)\n\nstd::cin >> s;",
        "Get all STDIN" : false,
        "Get a char STDIN" : "s=getchar()",
        "Print without a new line at the end" : "printf(\"%s\",s)\n\nstd::cout << s;",
        "Print with a new line at the end" : "printf(\"%s\\n\",s)\n\nstd::cout << s << \"\\n\";",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : true,
        "Format a string" : "sprintf(\"%s\",s)",
        "Template string" : false,
        "Three-Way operator" : true
    },

    "JavaScript" : {
        "Variable declaration" : "let s = \"a variable\"\n\nvar s = \"a variable\"\n\ns = \"a variable\"",
        "Constant declaration" : "const s = \"a constant\"",
        "Function declaration" : "function a_function(argument){\n\treturn argument\n}",
        "Lambda declaration" : "a_lambda = argument => argument",
        "While loop" : "while (b){...}",
        "For loop" : "for(let i = 0; i < n; i++){...}",
        "Foreach loop" : "for (const elem of a_list){...}",
        "Do .. while loop" : "do{\n\t...\n}while (b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if(b1){\n\t...\n} else if (b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try {\n\t...\n} catch (e) {\n\t...\n}",
        "Switch" : "switch (x){\n\tcase y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "prompt()",
        "Get all STDIN" : false,
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "process.stdout.write(s)",
        "Print with a new line at the end" : "console.log(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : false,
        "Template string" : "`${var1}, ${var2}`",
        "Three-Way operator" : false
    },

    "Julia" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : "S = \"a constant\"",
        "Function declaration" : "function a_function(argument)\n\treturn argument\nend",
        "Lambda declaration" : "a_lambda = argument -> argument",
        "While loop" : "while b\n...\nend",
        "For loop" : "for i = 0:n-1\n\t...\nend",
        "Foreach loop" : "for elem in a_list\n\t...\nend",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for (i, elem) in enumerate(a_list)\n\t...\nend",
        "Infinite loop" : "while true\n\t...\nend",
        "if ... else if ... else" : "if b1\n\t...\nelseif b2 \n\t...\n else \n\t...\nend",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "try \n\t...\ncatch e\n\t...\nend",
        "Switch" : false,
        "Type of the %" : "Truncated",
        "Top level constructor" : false,
        "Get a line of STDIN" : "readline()",
        "Get all STDIN" : "readlines()",
        "Get a char STDIN" : "read(stdin, char)",
        "Print without a new line at the end" : "print(s)",
        "Print with a new line at the end" : "println(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "@printf \"%d\" n",
        "Template string" : "\"$var1, $var2\"",
        "Three-Way operator" : false
    },

    "Python" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : false,
        "Function declaration" : "def a_function(argument):\n\treturn argument",
        "Lambda declaration" : "a_lambda = lambda argument: argument",
        "While loop" : "while b:\n\t...",
        "For loop" : "for i in range(n):\n\t...",
        "Foreach loop" : "for i in a_list:\n\t...",
        "Do .. while loop" : false,
        "Foreach index and element loop" : "for i,elem in enumerate(a_list):\n\t...",
        "Infinite loop" : "while 1:\n\t...",
        "if ... else if ... else" : "if b1:\n\t...\nelif b2:\n\t...\nelse:\n\t...",
        "Ternary operator" : "_true if b else _false\n\n[_false, _true][b]",
        "Try ... Catch" : "try:\n\t...\nexcept:\n\t...",
        "Switch" : "match x:\n\tcase y:\n\t\t...\n\tcase _:\n\t\t...",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "input()",
        "Get all STDIN" : "open(0).read()",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "print(s, end='')",
        "Print with a new line at the end" : "print(s)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "'%i'%n",
        "Template string" : "f'{var1}, {var2}'",
        "Three-Way operator" : false
    },

    "Ruby" : {
        "Variable declaration" : "s = \"a variable\"",
        "Constant declaration" : "S = \"a constant\"",
        "Function declaration" : "def a_function(argument)\n\treturn argument\nend",
        "Lambda declaration" : "a_lambda = -> argument{argument}",
        "While loop" : "while b do\n\t...\nend",
        "For loop" : "for i in 0...n\n\n(0...n).map{...}",
        "Foreach loop" : "for i in a_list\n\na_list.map{...}",
        "Do .. while loop" : "begin\n\t...\nend while b",
        "Foreach index and element loop" : false,
        "Infinite loop" : "loop{...}",
        "if ... else if ... else" : "if b1\n\t...\nelsif b2\n\t...\nelse\n\t...\nend",
        "Ternary operator" : "b ? _true : _false",
        "Try ... Catch" : "begin\n\t...\nrescue\n\t...\nend",
        "Switch" : "case x\n\twhen y\n\t\t...\n\telse\n\t\t...\nend",
        "Type of the %" : "Floored",
        "Top level constructor" : false,
        "Get a line of STDIN" : "gets",
        "Get all STDIN" : "$<",
        "Get a char STDIN" : "$<.getc",
        "Print without a new line at the end" : "print s\n$><&lt;s",
        "Print with a new line at the end" : "puts s\np s",
        "Implicit conversion of bool to int" : false,
        "Implicit conversion of char to int" : false,
        "Format a string" : "'%i'%n",
        "Template string" : "\"#{var1}, #{var2}\"",
        "Three-Way operator" : true
    },

    "PHP" : {
        "Variable declaration" : "$s = \"a variable\"",
        "Constant declaration" : "define(\"S\", \"a constant\")",
        "Function declaration" : "function a_function($argument){\n\treturn $argument;\n}",
        "Lambda declaration" : "$a_lambda = function ($argument){\n\treturn $argument;\n}",
        "While loop" : "while ($b){...}",
        "For loop" : "for($i = 0; $i < $n; $i++){...}",
        "Foreach loop" : "for($arr as $e){...}",
        "Do .. while loop" : "do{\n\t...\n}while ($b)",
        "Foreach index and element loop" : false,
        "Infinite loop" : "for(;;){...}",
        "if ... else if ... else" : "if($b1){\n\t...\n} elseif ($b2) {\n\t...\n} else {\n\t...\n}",
        "Ternary operator" : "$b ? $true : $false",
        "Try ... Catch" : "try {\n\t...\n} catch (Exception $e) {\n\t...\n}",
        "Switch" : "switch ($x){\n\tcase $y:\n\t\t...\n\t\tbreak;\n\tdefault:\n\t\t...\n\t\tbreak;\n}",
        "Type of the %" : "Truncated",
        "Top level constructor" : "&lt;? else it's HTML",
        "Get a line of STDIN" : "fgets(STDIN)",
        "Get all STDIN" : "`dd`",
        "Get a char STDIN" : false,
        "Print without a new line at the end" : "echo$s\n?&gt;&lt;?=$s (if it's at the end)",
        "Print with a new line at the end" : "echo\"$s\\n\"\n?&gt;&lt;?=\"$s\\n\" (if it's at the end)",
        "Implicit conversion of bool to int" : true,
        "Implicit conversion of char to int" : false,
        "Format a string" : "sprintf(\"%s\",$s)",
        "Template string" : "\"$var {$expr}\"",
        "Three-Way operator" : true
    }
}
